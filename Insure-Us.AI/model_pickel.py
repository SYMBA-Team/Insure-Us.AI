# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hmRSj0PitspTlpCvwRxWny2IuZ6CVqOc
"""

import pandas as pd 
data= pd.read_csv('B.HEALTH classification.csv')
data=data.drop(['subject','day','label'],axis=1)

data['efficiency (%)'] = data['efficiency (%)'].mask(data['efficiency (%)'] < 80, 0)
data['efficiency (%)'] = data['efficiency (%)'].mask(data['efficiency (%)'] > 80, 1)

x=data.drop(['efficiency (%)'],axis=1)
y=data['efficiency (%)']

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,random_state=30)
from sklearn import preprocessing
from sklearn.preprocessing import StandardScaler
standard = preprocessing.scale(x_train)
autoscaler = StandardScaler()
x=autoscaler.fit_transform(x)


x_train, x_test, y_train, y_test= train_test_split(x, y, test_size=0.3)

data

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier #Importing Random Forest Classifier
from sklearn import metrics
clf=RandomForestClassifier(n_estimators=10)  #Creating a random forest with 100 decision trees
clf.fit(x_train, y_train)  #Training our model
y_pred=clf.predict(x_test)  #testing our model
print("Accuracy:", metrics.accuracy_score(y_test, y_pred))  #Measuring the accuracy of our model

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn import metrics
logreg = LogisticRegression()   #build our logistic model
logreg.fit(x_train, y_train)  #fitting training data
y_pred  = logreg.predict(x_test)    #testing modelâ€™s performance
print("Accuracy={:.2f}".format(logreg.score(x_test, y_test)))

#import the relevant libraries
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=30) #split our data with test size of 20% 

knn=KNeighborsClassifier(n_neighbors=20) #build our knn classifier
knn.fit(x_train,y_train) #Training KNN classifier
y_pred=knn.predict(x_test)  #Testing
print('Acuuracy=',accuracy_score(y_pred,y_test))